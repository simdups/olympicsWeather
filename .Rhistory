"precipation_proba", "precipitation"))
expect_equal(ncol(unnest_response(resp)), 5)
})
# Chunk 7
library(tidygeocoder)
library(dplyr, warn.conflicts = FALSE)
address_to_gps = function(adresse){
lieu = tibble(
adresse) |>
geocode(address = adresse, method = "osm") |>
select(lat, long)
unlist(lieu)
}
address_to_gps("Nantes")
# Chunk 8
get_gps_coordinate = function(adresse){
lieu = address_to_gps(adresse)
names(lieu) = c("x", "y")
return(lieu)
}
xy = get_gps_coordinate("Nantes")
length(xy)
is.numeric(xy)
# Chunk 9
get_forecast.numeric = function(xy){
if (is.numeric(xy) && length(xy) == 2) {
météo_tibble = unnest_response(perform_request(xy[1],xy[2]))
print(météo_tibble)
} else {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
}
# exemple sans erreur :
get_forecast.numeric(xy)
# exemple avec erreur :
yz = 10
get_forecast.numeric(yz)
get_forecast.character = function(address){
if (is.character(address) && length(address) == 1){
get_forecast.numeric(address_to_gps(address))
} else {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
}
# exemple sans erreur :
get_forecast.character("Boulevard de Longchamp, Nantes")
# exemple avec erreur :
get_forecast.character(23)
#' Prévisions Météo
#'
#' @description Cette fonction permet d'obtenir les prévisions météo en temps réel d'un lieu pour chaque heure des 7 prochains jours. Voici les 4 renseignements obtenus : la "temperature_celsius", la "temperature_ressentie_celsius", la "precipation_proba" et les "precipitation".
#'
#' @param add_ou_coord Adresse litérale ou coordonnées géographiques du lieu souhaité
#'
#' @return un tibble contenant la météo horaire de l'endroit en question des 7 prochains jours
#'
#' @export
#'
#' @importFrom les libraries suivantes sont nécessaires : dplyr, tidygeocoder, testthat, tibble, httr2.
#'
#' @examples
#' get_forecast("Nantes")
#'
#' coord = c(47.218371, -1.553621)
#' get_forecast(coord)
#'
get_forecast = function(add_ou_coord){
UseMethod("get_forecast")
}
get_forecast("Nantes")
library(httr2)
library(tibble)
library(testthat)
devtools::document
library(httr2)
library(tibble)
library(testthat)
library(tidygeocoder)
library(dplyr)
perform_request <- function(lat, long) {
api_url <- "https://api.open-meteo.com/v1/forecast"
params <- list(
latitude = lat,
longitude = long,
hourly = c(
"temperature_2m",
"apparent_temperature", "precipitation_probability",
"precipitation"
)
)
req <- request(api_url) |>
req_url_query(!!!params, .multi = "comma") |>
# Exécution de la requête et récupération des résultats
req_perform() |>
# sauf qu'ils sont au format json (Content-Type: application/json)
# donc on a besoin de cette étape :
# Extraction des données JSON de la réponse
resp_body_json() |>
as.tibble()
return(req)
}
unnest_response <- function(resp) {
tibble(
date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]])
)
}
address_to_gps = function(adresse){
lieu = tibble(
adresse) |>
geocode(address = adresse, method = "osm") |>
select(lat, long)
unlist(lieu)
}
#' Prévisions Météo
#'
#' @description Cette fonction permet d'obtenir les prévisions météo en temps réel d'un lieu pour chaque heure des 7 prochains jours. Voici les 4 renseignements obtenus : la "temperature_celsius", la "temperature_ressentie_celsius", la "precipation_proba" et les "precipitation".
#'
#' @param add_ou_coord Adresse litérale ou coordonnées géographiques du lieu souhaité
#'
#' @return un tibble contenant la météo horaire de l'endroit en question des 7 prochains jours
#'
#' @export
#'
#' @importFrom dplyr select
#' @importFrom tidygeocoder geocode
#' @importFrom tibble tibble
#' @importFrom httr2 resp_body_json req_perform req_url_query request
#'
#' @examples
#' get_forecast("Nantes")
#'
#' coord = c(47.218371, -1.553621)
#' get_forecast(coord)
#'
#' @rdname get_forecast
get_forecast = function(add_ou_coord){
UseMethod("get_forecast")
}
#' @export
get_forecast.numeric = function(xy){
if (is.numeric(xy) && length(xy) == 2) {
météo_tibble = unnest_response(perform_request(xy[1],xy[2]))
print(météo_tibble)
} else {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
}
#' @export
get_forecast.character = function(address){
if (is.character(address) && length(address) == 1){
get_forecast.numeric(address_to_gps(address))
} else {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
}
install.packages("rtools")
?get_forecast
devtools::load_all(".")
rm(list = c("get_forecast"))
devtools::load_all(".")
?get_forecast
get_forecast("Paris")
paris = get_forecast("Paris")
View(paris)
?olympicsWeather
paris = get_forecast("Paris")
library(olympicsWeather)
devtools::load_all(".")
paris = get_forecast("Paris")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
#' @importFrom tibble tibble
#' @importFrom httr2 resp_body_json req_perform req_url_query request
#'
#' @examples
#' get_forecast("Nantes")
#'
#' coord = c(47.218371, -1.553621)
#' get_forecast(coord)
#'
#' @rdname get_forecast
get_forecast = function(add_ou_coord){
UseMethod("get_forecast")
}
library(httr2)
library(tibble)
library(testthat)
library(tidygeocoder)
library(dplyr)
perform_request <- function(lat, long) {
api_url <- "https://api.open-meteo.com/v1/forecast"
params <- list(
latitude = lat,
longitude = long,
hourly = c(
"temperature_2m",
"apparent_temperature", "precipitation_probability",
"precipitation"
)
)
req <- request(api_url) |>
req_url_query(!!!params, .multi = "comma") |>
# Exécution de la requête et récupération des résultats
req_perform() |>
# sauf qu'ils sont au format json (Content-Type: application/json)
# donc on a besoin de cette étape :
# Extraction des données JSON de la réponse
resp_body_json() |>
as.tibble()
return(req)
}
unnest_response <- function(resp) {
tibble(
date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]])
)
}
address_to_gps = function(adresse){
lieu = tibble(
adresse) |>
geocode(address = adresse, method = "osm") |>
select(lat, long)
unlist(lieu)
}
#' Prévisions Météo
#'
#' @description Cette fonction permet d'obtenir les prévisions météo en temps réel d'un lieu pour chaque heure des 7 prochains jours. Voici les 4 renseignements obtenus : la "temperature_celsius", la "temperature_ressentie_celsius", la "precipation_proba" et les "precipitation".
#'
#' @param add_ou_coord Adresse litérale ou coordonnées géographiques du lieu souhaité
#'
#' @return un tibble contenant la météo horaire de l'endroit en question des 7 prochains jours
#'
#' @export
#'
#' @importFrom dplyr select
#' @importFrom tidygeocoder geocode
#' @importFrom tibble tibble
#' @importFrom httr2 resp_body_json req_perform req_url_query request
#'
#' @examples
#' get_forecast("Nantes")
#'
#' coord = c(47.218371, -1.553621)
#' get_forecast(coord)
#'
#' @rdname get_forecast
get_forecast = function(add_ou_coord){
UseMethod("get_forecast")
}
#' @export
get_forecast.numeric = function(xy){
if (is.numeric(xy) && length(xy) == 2) {
météo_tibble = unnest_response(perform_request(xy[1],xy[2]))
print(météo_tibble)
} else {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
}
#' @export
get_forecast.character = function(address){
if (is.character(address) && length(address) == 1){
get_forecast.numeric(address_to_gps(address))
} else {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
}
library(olympicsWeather)
get_forecast("Nantes")
use_package(olympicsWeather)
library(devtools)
use_package(olympicsWeather)
use_package("olympicsWeather")
devtools::load_all(".")
devtools::load_all(".")
?olympicsWeather
?olympicsWeather
?olympicsWeather
devtools::load_all(".")
?olympicsWeather
devtools::load_all(".")
use_package("olympicsWeather")
library(olympicsWeather)
?get_forecast
devtools::load_all(".")
?get_forecast
library(olympicsWeather)
example(get_forecast, "olympicsWeather")
use_package(dplyr)
library(devtools)
use_package(dplyr)
use_package("dplyr")
use_package("dplyr", "tibble", "httr2")
use_package("tibble", "httr2")
use_package("tibble")
use_package("httr2")
use_package("tidygeocoder")
use_gpl3_license()
library(olympicsWeather)
?olympicsWeather
perform_request <- function(lat, long) {
api_url <- "https://api.open-meteo.com/v1/forecast"
params <- list(
latitude = lat,
longitude = long,
hourly = c(
"temperature_2m",
"apparent_temperature", "precipitation_probability",
"precipitation"
)
)
req <- request(api_url) |>
req_url_query(!!!params, .multi = "comma") |>
# Exécution de la requête et récupération des résultats
req_perform() |>
# sauf qu'ils sont au format json (Content-Type: application/json)
# donc on a besoin de cette étape :
# Extraction des données JSON de la réponse
resp_body_json() |>
as.tibble()
return(req)
}
perform_request(47.218371, -1.553621)
library(httr2)
library(tibble)
library(testthat)
library(tidygeocoder)
library(dplyr)
perform_request(47.218371, -1.553621)
library(testthat)
test_that("multiplication works", {
resp <- perform_request(48.8566, 2.3522)
expect_equal(nrow(unnest_response(resp)), 168)
expect_identical(colnames(unnest_response(resp)),
c("date_heure", "temperature_celsius",
"temperature_ressentie_celsius",
"precipation_proba", "precipitation"))
expect_equal(ncol(unnest_response(resp)), 5)
})
library(httr2)
library(tibble)
library(testthat)
library(tidygeocoder)
library(dplyr)
perform_request <- function(lat, long) {
api_url <- "https://api.open-meteo.com/v1/forecast"
params <- list(
latitude = lat,
longitude = long,
hourly = c(
"temperature_2m",
"apparent_temperature", "precipitation_probability",
"precipitation"
)
)
req <- request(api_url) |>
req_url_query(!!!params, .multi = "comma") |>
# Exécution de la requête et récupération des résultats
req_perform() |>
# sauf qu'ils sont au format json (Content-Type: application/json)
# donc on a besoin de cette étape :
# Extraction des données JSON de la réponse
resp_body_json() |>
as.tibble()
return(req)
}
unnest_response <- function(resp) {
tibble(
date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
temperature_ressentie_celsius = unlist(resp$hourly[3][[1]]),
precipation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]])
)
}
address_to_gps = function(adresse){
lieu = tibble(
adresse) |>
geocode(address = adresse, method = "osm") |>
select(lat, long)
unlist(lieu)
}
#' Prévisions Météo
#'
#' @description Cette fonction permet d'obtenir les prévisions météo en temps réel d'un lieu pour chaque heure des 7 prochains jours. Voici les 4 renseignements obtenus : la "temperature_celsius", la "temperature_ressentie_celsius", la "precipation_proba" et les "precipitation".
#'
#' @param add_ou_coord Adresse litérale ou coordonnées géographiques du lieu souhaité
#'
#' @return un tibble contenant la météo horaire de l'endroit en question des 7 prochains jours
#'
#' @export
#'
#' @importFrom dplyr select
#' @importFrom tidygeocoder geocode
#' @importFrom tibble tibble
#' @importFrom httr2 resp_body_json req_perform req_url_query request
#'
#' @examples
#' get_forecast("Nantes")
#'
#' @examples
#' coord = c(47.218371, -1.553621)
#' get_forecast(coord)
#'
#' @rdname get_forecast
get_forecast = function(add_ou_coord){
UseMethod("get_forecast")
}
#' @export
get_forecast.numeric = function(xy){
if (is.numeric(xy) && length(xy) == 2) {
météo_tibble = unnest_response(perform_request(xy[1],xy[2]))
print(météo_tibble)
} else {
stop("L'argument xy doit être un vecteur numérique de taille 2.")
}
}
#' @export
get_forecast.character = function(address){
if (is.character(address) && length(address) == 1){
get_forecast.numeric(address_to_gps(address))
} else {
stop("L'argument address doit être une chaîne de caractères de taille 1.")
}
}
library(testthat)
test_that("multiplication works", {
resp <- perform_request(48.8566, 2.3522)
expect_equal(nrow(unnest_response(resp)), 168)
expect_identical(colnames(unnest_response(resp)),
c("date_heure", "temperature_celsius",
"temperature_ressentie_celsius",
"precipation_proba", "precipitation"))
expect_equal(ncol(unnest_response(resp)), 5)
})
perform_request <- function(lat, long) {
api_url <- "https://api.open-meteo.com/v1/forecast"
params <- list(
latitude = lat,
longitude = long,
hourly = c(
"temperature_2m",
"apparent_temperature", "precipitation_probability",
"precipitation"
)
)
req <- request(api_url) |>
req_url_query(!!!params, .multi = "comma") |>
# Exécution de la requête et récupération des résultats
req_perform() |>
# sauf qu'ils sont au format json (Content-Type: application/json)
# donc on a besoin de cette étape :
# Extraction des données JSON de la réponse
resp_body_json() |>
as_tibble()
return(req)
}
library(testthat)
test_that("multiplication works", {
resp <- perform_request(48.8566, 2.3522)
expect_equal(nrow(unnest_response(resp)), 168)
expect_identical(colnames(unnest_response(resp)),
c("date_heure", "temperature_celsius",
"temperature_ressentie_celsius",
"precipation_proba", "precipitation"))
expect_equal(ncol(unnest_response(resp)), 5)
})
devtools::test()
devtools::check()
devtools::check()
?as_tibble
library(tidyverse)
library(testthat)
test_that("multiplication works", {
resp <- perform_request(48.8566, 2.3522)
expect_equal(nrow(unnest_response(resp)), 168)
expect_identical(colnames(unnest_response(resp)),
c("date_heure", "temperature_celsius",
"temperature_ressentie_celsius",
"precipation_proba", "precipitation"))
expect_equal(ncol(unnest_response(resp)), 5)
})
devtools::check()
test_that("multiplication works", {
resp <- perform_request(48.8566, 2.3522)
expect_equal(nrow(unnest_response(resp)), 168)
expect_identical(colnames(unnest_response(resp)),
c("date_heure", "temperature_celsius",
"temperature_ressentie_celsius",
"precipation_proba", "precipitation"))
expect_equal(ncol(unnest_response(resp)), 5)
})
devtools::check()
devtools::load_all(".")
library(olympicsWeather)
devtools::check()
use_package("tidyverse")
use_package("tidyverse", type = "depends")
use_package("testthat")
use_package("testthat")
use_package("testthat")
devtools::load_all(".")
library(olympicsWeather)
get_forecast("Nantes")
devtools::check()
library(olympicsWeather)
